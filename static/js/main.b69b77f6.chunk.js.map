{"version":3,"sources":["components/HeaderToDo.js","components/FormToDo.js","components/ItemListToDo.js","components/ListToDo.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderToDo","className","role","aria-label","FormToDo","props","useState","text","setText","onSubmit","e","preventDefault","todoText","isCompleted","id","uuidv4","required","pattern","type","aria-describedby","placeholder","value","onChange","target","ItemListToDo","todos","todo","index","completeTodo","deleteToDo","editToDo","setEditToDo","updateTodo","setUpdateTodo","setUpdateTodos","onClick","map","length","console","log","localStorage","setItem","JSON","stringify","aria-hidden","disabled","ListToDo","setTodos","useEffect","todosStore","parse","getItem","todosArray","filter","newTodo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b69b77f6.chunk.js","sourcesContent":["import React from 'react'\n\nexport const HeaderToDo = () => {\n    return (\n        <div className=\"row\">\n            <div className=\"col-md headerText text-center my-5\">\n                <h2 className=\"mb-4 mt-5\">Hello, Ø§Ù‡Ù„Ø§Ù‹ , Hola!! <span role=\"img\" aria-label=\"smile\">ðŸ˜ƒ</span></h2>\n                <p className=\"lead mb-0\">With no <strong>sign-in/up</strong> rquired you can list your todos.</p>\n                <p className=\"lead\">\n                    Don't worry you can't lose the list even if you reload the app. <strong>Enjoy <span role=\"img\" aria-label=\"rocket\">ðŸš€</span></strong>\n                </p>\n            </div>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function FormToDo(props) {\n\n    const [text, setText] = useState('');\n\n    const addToDoHandler = e => {\n\n        e.preventDefault()\n\n        props.onSubmit({\n            todoText: text,\n            isCompleted: false,\n            id: uuidv4()\n        })\n\n        setText('')\n\n    }\n\n    return (\n        <form className=\"row justify-content-between p-3\" onSubmit={addToDoHandler}>\n            <input required pattern=\".*\\S+.*\" type=\"text\" className=\"inputControl\" aria-describedby=\"toDoText\" placeholder=\"Please write your todo\" value={text} onChange={(e) => setText(e.target.value)} />\n            <input type=\"submit\" className=\"btn btnControl btnBg\" value=\"Add\" />\n        </form>\n    )\n}\n","import React, { useState } from 'react'\n\nexport default function ItemListToDo({ todos, todo, index, completeTodo, deleteToDo }) {\n\n    const [editToDo, setEditToDo] = useState(false)\n\n    const [updateTodo, setUpdateTodo] = useState(todo.todoText)\n\n    const [updateTodos, setUpdateTodos] = useState(todos)\n\n    const submitUpdate = id => {\n        setUpdateTodos(\n            todos.map(todo => {\n                if (todo.id === id && updateTodo.length > 0) {\n                    console.log(todo.todoText)\n                    todo.todoText = updateTodo\n                }\n            })\n        )\n        localStorage.setItem('todos', JSON.stringify(todos))\n        setEditToDo(!editToDo)\n\n    }\n\n    return (\n        <div className=\"litsItem my-5 p-3\">\n\n            {\n                editToDo ?\n                    <div className=\"row\">\n                        <input className=\"inputControl\" required value={updateTodo} onChange={(e) => setUpdateTodo(e.target.value)} />\n                        <button className=\"btn btnBg btnControl btnControlUpdate\" onClick={() => submitUpdate(todo.id)}>Update</button>\n                    </div>\n                    :\n                    <div className=\"row justify-content-between flexColumn\">\n                        <div>\n                            <h4 className={`${todo.isCompleted ? 'completed' : ''}`}>{todo.todoText}</h4>\n                        </div>\n                        <div>\n                            <button className=\"btn btn-success\" onClick={() => completeTodo(index)}><i className={`fa ${todo.isCompleted ? \"fa-times\" : \"fa-check\"}`} aria-hidden=\"true\"></i></button>\n                            <button className=\"btn btn-danger btnsMarginFix\" onClick={() => deleteToDo(todo.id)}><i className=\"fa fa-trash\" aria-hidden=\"true\"></i></button>\n                            <button className=\"btn btn-warning btn-warning-white\" onClick={() => setEditToDo(!editToDo)} disabled={todo.isCompleted}><i className=\"fa fa-pencil\" aria-hidden=\"true\"></i></button>\n                        </div>\n                    </div>\n            }\n\n        </div >\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport FormToDo from './FormToDo';\nimport ItemListToDo from './ItemListToDo';\n\n\nexport default function ListToDo() {\n\n    const [todos, setTodos] = useState([])\n\n\n    useEffect(() => {\n        const todosStore = JSON.parse(localStorage.getItem('todos'))\n        if (todosStore) setTodos(todosStore)\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(todos))\n    }, [todos])\n\n\n    const addToDo = todo => {\n        const newTodo = [todo, ...todos]\n        setTodos(newTodo)\n    }\n\n    const completeTodo = index => {\n        let todosArray = [...todos];\n        todosArray[index].isCompleted = !todosArray[index].isCompleted;\n        setTodos(todosArray);\n    }\n\n    const deleteToDo = id => {\n        let todosArray = [...todos].filter(todo => todo.id !== id)\n        setTodos(todosArray);\n    }\n\n\n    /*\n\n    we can do the deleteing using splice method also\n\n    const deleteToDo = index => {\n        let todosArray = [...todos];\n        todosArray.splice(index, 1);\n        setTodos(todosArray);\n    }\n\n    onClick={() => deleteToDo(index)}\n    */\n\n    return (\n        <>\n            <FormToDo onSubmit={addToDo} />\n            {\n                todos.length <= 0 ? <h3 className=\"text-center my-5\">You have nothing to do ... So far!</h3> :\n                    todos.map((todo, index) => <ItemListToDo key={index} index={index} todo={todo} todos={todos} completeTodo={completeTodo} deleteToDo={deleteToDo}></ItemListToDo>)\n\n\n            }\n        </>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport { HeaderToDo } from './components/HeaderToDo';\nimport ListToDo from './components/ListToDo';\n\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <HeaderToDo />\n      <ListToDo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}